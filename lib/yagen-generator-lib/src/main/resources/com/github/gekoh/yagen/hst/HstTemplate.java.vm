#*
 Copyright 2014 Georg Kohlweiss

 Licensed under the Apache License, Version 2.0 (the License);
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an AS IS BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

/*
 * History Entity Template
 *
 */*#/*
 * this file is generated by yaGen (http://www.github.com/gekoh/yaGen)
 * please do not edit
 */
package ${entityClassPackageName};

import org.joda.time.DateTime;

import javax.persistence.Table;

import ${baseClassPackageName}.Operation;
import com.github.gekoh.yagen.api.Generated;

#*/**
 * @author Georg Kohlweiss
 */*#
@Generated
#if( $tableName )
@Table(
        name = ${entityClassSimpleName}.TABLE_NAME
)
#end
#if( $classAnnotation )
${classAnnotation}
#end
public class ${entityClassSimpleName} extends
#if( $entitySuperClassName ) $entitySuperClassName #else ${baseClassPackageName}.BaseEntity #end {
#if( $tableName )
    public static final String TABLE_NAME = "${tableName}";
#end
#if( $tableShortName )
    public static final String TABLE_NAME_SHORT = "${tableShortName}";
#end

#if( ! $entitySuperClassName && ${baseEntityUuidColumnName} )
    /**
     * Technical unique key of the live entity.
     */
    @javax.persistence.Column(name = "${baseEntityUuidColumnName}", length = ${baseEntityUuidColumnLength}, nullable=false)
    private String liveUuid;
#end

    /*
     * Start of section for fields out of live entities.
     * Instead of references to other entities we will only have their @Id field mapped
     */
#foreach( $fieldInfo in $fieldInfoList )

## skip Id column as we map it as liveUuid
#if( !${fieldInfo.isCollection()} && (!${fieldInfo.getColumnName()} || $baseEntityUuidColumnName != ${fieldInfo.getColumnName()}) )
#if( ${fieldInfo.isEnum()} )
    @javax.persistence.Enumerated(value = javax.persistence.EnumType.STRING)
#end
#if( ${fieldInfo.isEmbedded()} )
    @javax.persistence.Embedded
#end
#if( ${fieldInfo.getColumnAnnotation()} )
    ${fieldInfo.getColumnAnnotation()}
#end
    private ${fieldInfo.getType().getName()} ${fieldInfo.getName()};
#end
#end
    /*
     * End of section for fields out of live entities.
     */

    protected ${entityClassSimpleName} () {
    }

#if( $entitySuperClassName || $baseEntityUuidColumnName )
    public ${entityClassSimpleName} (String liveUuid, DateTime transactionTimestamp, DateTime invalidatedAt) {
        this(liveUuid, Operation.I, transactionTimestamp, invalidatedAt);
    }

    public ${entityClassSimpleName} (String liveUuid, Operation operation, DateTime transactionTimestamp, DateTime invalidatedAt) {
        super(liveUuid, operation, transactionTimestamp, invalidatedAt);
    }
#else
    public ${entityClassSimpleName} (DateTime transactionTimestamp, DateTime invalidatedAt) {
        this(Operation.I, transactionTimestamp, invalidatedAt);
    }

    public ${entityClassSimpleName} (Operation operation, DateTime transactionTimestamp, DateTime invalidatedAt) {
        super(null, operation, transactionTimestamp, invalidatedAt);
    }
#end

#if( ! $entitySuperClassName && ${baseEntityUuidColumnName} )
    protected void setLiveUuid(String liveUuid) {
        this.liveUuid = liveUuid;
    }

    public String getLiveUuid() {
        return liveUuid;
    }
#end
## in case of ManyToMany relations we have no live uuid but need to implement abstract method
#if( ! $entitySuperClassName && ! ${baseEntityUuidColumnName} )
    protected void setLiveUuid(String liveUuid) {
        if (liveUuid != null) {
            throw new IllegalArgumentException("live uuid does not exist on relations with JoinTable");
        }
    }
#end

    /*
     * Start of section for getters and setters of fields out of live entities.
     */
#foreach( $fieldInfo in $fieldInfoList )
## skip Id column as we map it as liveUuid
#if( !${fieldInfo.isCollection()} && (!${fieldInfo.getColumnName()} || $baseEntityUuidColumnName != ${fieldInfo.getColumnName()}) )
## building the camel case method name for setter and getter
#set( $nameCC = "${fieldInfo.getName().substring(0, 1).toUpperCase()}${fieldInfo.getName().substring(1)}")

    public void set${nameCC}(${fieldInfo.getType().getName()} ${fieldInfo.getName()}) {
        this.${fieldInfo.getName()} = ${fieldInfo.getName()};
    }

    public ${fieldInfo.getType().getName()} get${nameCC}() {
        return ${fieldInfo.getName()};
    }
#end
#end
    /*
     * End of section for getters and setters of fields out of live entities.
     */
}
